#!/bin/bash
# claude-lane: Unified cross-platform API switching tool
# Securely switch between different Claude API endpoints

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_DIR="$HOME/.claude"
CONFIG_FILE="$CONFIG_DIR/config.yaml"
LAST_PROFILE_FILE="$CONFIG_DIR/last_profile"
DEFAULT_PROFILE="official-api"

# Global flags
ENV_ONLY=false
NO_RUN=false
INTERACTIVE=false

show_usage() {
    echo "claude-lane - Secure Claude API endpoint switcher"
    echo ""
    echo "Usage:"
    echo "  claude-lane [message]               - Use last profile (or official) and run claude"
    echo "  claude-lane <profile> [message]     - Switch to profile and run claude"
    echo "  claude-lane set-key <ref> <key>     - Store an API key securely"
    echo "  claude-lane list                    - List available profiles and stored keys"
    echo "  claude-lane status                  - Show current configuration status"
    echo "  claude-lane --reset                 - Reset to official profile"
    echo "  claude-lane --env-only [profile]    - Only set environment variables"
    echo "  claude-lane help                    - Show this help message"
    echo ""
    echo "Examples:"
    echo "  claude-lane \"Hello, how are you?\"    - Quick chat with last/default profile"
    echo "  claude-lane official \"Write a poem\"  - Use official API to write a poem"
    echo "  claude-lane set-key official sk-ant-api03-..."
    echo "  claude-lane proxy                   - Switch to proxy and run claude interactively"
    echo "  claude-lane --env-only official     - Only set environment, don't run claude"
    echo ""
    echo "Configuration:"
    echo "  Config file: $CONFIG_FILE"
    echo "  Last profile: $LAST_PROFILE_FILE"
    echo "  Keys stored using OS-native secure storage"
}

detect_platform() {
    case "$(uname -s)" in
        Darwin*)
            echo "macos"
            ;;
        Linux*)
            echo "linux"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            echo "windows"
            ;;
        *)
            echo "unsupported"
            ;;
    esac
}

get_keystore_script() {
    local platform="$1"
    case "$platform" in
        windows)
            echo "$PROJECT_ROOT/scripts/windows/keystore.ps1"
            ;;
        macos)
            echo "$PROJECT_ROOT/scripts/macos/keystore.sh"
            ;;
        linux)
            echo "$PROJECT_ROOT/scripts/linux/keystore.sh"
            ;;
        *)
            echo "Error: Unsupported platform: $platform" >&2
            exit 1
            ;;
    esac
}

call_keystore() {
    local platform="$(detect_platform)"
    local script="$(get_keystore_script "$platform")"
    
    if [[ ! -f "$script" ]]; then
        echo "Error: Keystore script not found: $script" >&2
        exit 1
    fi
    
    case "$platform" in
        windows)
            powershell.exe -ExecutionPolicy Bypass -File "$script" "$@"
            ;;
        *)
            chmod +x "$script" 2>/dev/null || true
            "$script" "$@"
            ;;
    esac
}

ensure_config_dir() {
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
    fi
}

save_last_profile() {
    local profile="$1"
    echo "$profile" > "$LAST_PROFILE_FILE"
}

get_last_profile() {
    if [[ -f "$LAST_PROFILE_FILE" ]]; then
        cat "$LAST_PROFILE_FILE"
    else
        echo "$DEFAULT_PROFILE"
    fi
}

get_current_profile() {
    # Try to determine current profile from environment or last used
    if [[ -n "${CLAUDE_LANE_PROFILE:-}" ]]; then
        echo "$CLAUDE_LANE_PROFILE"
    else
        get_last_profile
    fi
}

show_status() {
    echo "=== claude-lane Status ==="
    echo "Config file: $CONFIG_FILE"
    echo "Last profile file: $LAST_PROFILE_FILE"
    echo ""
    
    local current_profile="$(get_current_profile)"
    echo "Current/Last profile: $current_profile"
    
    if [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
        echo "Environment: ANTHROPIC_API_KEY is set"
        echo "Environment: ANTHROPIC_BASE_URL=${ANTHROPIC_BASE_URL:-<not set>}"
    else
        echo "Environment: No ANTHROPIC_API_KEY set"
    fi
    
    echo ""
    if command -v claude >/dev/null 2>&1; then
        echo "Claude CLI: Available ($(which claude))"
    else
        echo "Claude CLI: Not found in PATH"
    fi
    
    echo ""
    list_profiles_and_keys
}

parse_yaml() {
    local file="$1"
    local profile="$2"
    
    if [[ ! -f "$file" ]]; then
        echo "Error: Config file not found: $file" >&2
        echo "Run 'claude-lane help' for setup instructions" >&2
        exit 1
    fi
    
    # YAML parser for endpoints section format
    local in_endpoints=false
    local in_profile=false
    local base_url=""
    local key_ref=""
    
    while IFS= read -r line; do
        # Remove leading/trailing whitespace
        line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
        
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^# ]] && continue
        
        # Look for endpoints: section
        if [[ "$line" == "endpoints:" ]]; then
            in_endpoints=true
            continue
        fi
        
        # If we're in endpoints section, look for our profile
        if [[ "$in_endpoints" == true ]]; then
            # Check if this line starts a new profile
            if [[ "$line" =~ ^[[:alnum:]_-]+: ]]; then
                if [[ "$line" == "$profile:" ]]; then
                    in_profile=true
                else
                    in_profile=false
                fi
                continue
            fi
            
            # If we're in the target profile, parse the properties
            if [[ "$in_profile" == true ]]; then
                if [[ "$line" =~ ^base_url:[[:space:]]*\"?([^\"]+)\"? ]]; then
                    base_url="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ ^key_ref:[[:space:]]*\"?([^\"]+)\"? ]]; then
                    key_ref="${BASH_REMATCH[1]}"
                fi
            fi
        fi
    done < "$file"
    
    if [[ -z "$base_url" || -z "$key_ref" ]]; then
        echo "Error: Profile '$profile' not found or incomplete in config" >&2
        exit 1
    fi
    
    echo "$base_url|$key_ref"
}

use_profile() {
    local profile="$1"
    shift # Remove profile from arguments, rest are claude arguments
    
    if [[ -z "$profile" ]]; then
        echo "Error: Profile name required" >&2
        show_usage
        exit 1
    fi
    
    # If no config file exists, use Claude CLI's built-in web login
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "No configuration found. Using Claude CLI's built-in web login."
        echo ""
        
        # Auto-run claude if available
        if command -v claude >/dev/null 2>&1; then
            if [[ $# -gt 0 ]]; then
                echo "Running: claude $*"
                exec claude "$@"
            else
                echo "Running claude interactively..."
                exec claude
            fi
        else
            echo "Claude CLI not found. Please install it first:"
            echo "Visit: https://github.com/anthropics/claude-cli"
        fi
        return
    fi
    
    # Parse configuration
    local config_data="$(parse_yaml "$CONFIG_FILE" "$profile")"
    local base_url="$(echo "$config_data" | cut -d'|' -f1)"
    local key_ref="$(echo "$config_data" | cut -d'|' -f2)"
    
    # Retrieve API key
    local api_key="$(call_keystore get "$key_ref")"
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to retrieve API key for '$key_ref'" >&2
        echo "Use 'claude-lane set-key $key_ref <your-api-key>' to store the key" >&2
        exit 1
    fi
    
    # Set environment variables for Claude CLI
    export ANTHROPIC_API_KEY="$api_key"
    export ANTHROPIC_BASE_URL="$base_url"
    export CLAUDE_LANE_PROFILE="$profile"
    
    # Save as last used profile
    ensure_config_dir
    save_last_profile "$profile"
    
    echo "Switched to profile '$profile'"
    echo "Base URL: $base_url"
    echo "Using key: $key_ref"
    
    # If ENV_ONLY flag is set, just set environment and exit
    if [[ "$ENV_ONLY" == true ]]; then
        echo ""
        echo "Environment variables set:"
        echo "  ANTHROPIC_API_KEY=***"
        echo "  ANTHROPIC_BASE_URL=$base_url"
        echo "  CLAUDE_LANE_PROFILE=$profile"
        return 0
    fi
    
    # Auto-run claude if available
    if command -v claude >/dev/null 2>&1; then
        echo ""
        if [[ $# -gt 0 ]]; then
            # Run claude with provided arguments
            echo "Running: claude $*"
            exec claude "$@"
        else
            # Run claude interactively
            echo "Running claude interactively..."
            exec claude
        fi
    else
        echo ""
        echo "Claude CLI not found. Environment variables set:"
        echo "  ANTHROPIC_API_KEY=***"
        echo "  ANTHROPIC_BASE_URL=$base_url"
        echo ""
        echo "To install Claude CLI, visit: https://github.com/anthropics/claude-cli"
        if [[ $# -gt 0 ]]; then
            echo ""
            echo "You wanted to run: claude $*"
        fi
    fi
}

list_profiles_and_keys() {
    echo "=== Available Profiles ==="
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "No configuration file found."
        echo "You can use claude-lane without configuration (uses web login):"
        echo "  claude-lane \"Hello, how are you?\""
        echo ""
        echo "Or create a config file to use API keys:"
        echo "  1. Copy template: cp ~/.claude/scripts/*/templates/config.yaml ~/.claude/config.yaml"
        echo "  2. Store API key: claude-lane set-key official sk-ant-api03-your-key"
        echo "  3. Use API mode: claude-lane official-api \"Hello\""
        return
    fi
    
    # Parse profiles from config file
    local in_endpoints=false
    local profile_names=()
    
    while IFS= read -r line; do
        local trimmed="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
        if [[ "$trimmed" == "endpoints:" ]]; then
            in_endpoints=true
            continue
        fi
        
        if [[ "$in_endpoints" == true && "$line" =~ ^[[:space:]]{2}([a-zA-Z0-9_-]+): ]]; then
            local profile_name="${BASH_REMATCH[1]}"
            profile_names+=("$profile_name")
        fi
    done < "$CONFIG_FILE"
    
    # For each profile, check if it has a key
    for profile_name in "${profile_names[@]}"; do
        # Parse the profile to get its key_ref
        local config_data=""
        local key_ref=""
        
        if config_data="$(parse_yaml "$CONFIG_FILE" "$profile_name" 2>/dev/null)"; then
            key_ref="$(echo "$config_data" | cut -d'|' -f2)"
        fi
        
        # Check if the key exists
        local has_key=false
        if [[ -n "$key_ref" ]] && call_keystore get "$key_ref" >/dev/null 2>&1; then
            has_key=true
        fi
        
        local status_icon=""
        local status_text=""
        if [[ "$has_key" == true ]]; then
            status_icon="[OK]"
            status_text="has key"
        else
            status_icon="[--]"
            status_text="no key"
        fi
        
        echo "  $status_icon $profile_name ($status_text)"
        
        if [[ "$has_key" == false && -n "$key_ref" ]]; then
            echo "      To add key: claude-lane set-key $key_ref sk-your-api-key"
        fi
    done
    
    echo ""
    echo "=== Usage ==="
    echo "Without config (web login): claude-lane \"Hello\""
    echo "With API profile: claude-lane profile-name \"Hello\""
}

is_valid_profile() {
    local profile="$1"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        return 1
    fi
    grep -q "^[[:space:]]*$profile[[:space:]]*:" "$CONFIG_FILE"
}

# Parse command line arguments
parse_args() {
    local profile=""
    local claude_args=()
    local i=1
    
    while [[ $i -le $# ]]; do
        local arg="${!i}"
        case "$arg" in
            "--env-only")
                ENV_ONLY=true
                ((i++))
                ;;
            "--reset")
                profile="$DEFAULT_PROFILE"
                ((i++))
                ;;
            "--help"|"-h"|"help")
                show_usage
                exit 0
                ;;
            "--version")
                echo "claude-lane v1.1.0"
                exit 0
                ;;
            "set-key")
                if [[ $# -ne 3 ]]; then
                    echo "Error: 'set-key' requires key_ref and api_key arguments" >&2
                    show_usage
                    exit 1
                fi
                ensure_config_dir
                call_keystore set "${@:2:2}"
                exit 0
                ;;
            "list")
                list_profiles_and_keys
                exit 0
                ;;
            "status")
                show_status
                exit 0
                ;;
            -*)
                echo "Error: Unknown option '$arg'" >&2
                show_usage
                exit 1
                ;;
            *)
                # Check if this is a known profile
                if [[ -z "$profile" ]] && is_valid_profile "$arg"; then
                    profile="$arg"
                    ((i++))
                else
                    # This and all remaining args are for claude
                    claude_args=("${@:$i}")
                    break
                fi
                ;;
        esac
    done
    
    # If no profile specified, use last/default
    if [[ -z "$profile" ]]; then
        profile="$(get_current_profile)"
    fi
    
    # Use the profile and pass remaining args to claude
    use_profile "$profile" "${claude_args[@]}"
}

# Main entry point
main() {
    # Handle special case of no arguments
    if [[ $# -eq 0 ]]; then
        # If no config file, use web login directly
        if [[ ! -f "$CONFIG_FILE" ]]; then
            use_profile "web"  # Will be handled as web login in use_profile
        else
            local last_profile="$(get_current_profile)"
            use_profile "$last_profile"
        fi
        exit 0
    fi
    
    # Parse and execute
    parse_args "$@"
}

# Run main function
main "$@"