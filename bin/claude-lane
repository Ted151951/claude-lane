#!/bin/bash
# claude-lane: Unified cross-platform API switching tool
# Securely switch between different Claude API endpoints

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_DIR="$HOME/.claude"
CONFIG_FILE="$CONFIG_DIR/config.yaml"
LAST_PROFILE_FILE="$CONFIG_DIR/last_profile"
DEFAULT_PROFILE="official-api"

# Global flags
ENV_ONLY=false
NO_RUN=false
INTERACTIVE=false

show_usage() {
    echo "claude-lane - Secure Claude API endpoint switcher"
    echo ""
    echo "Usage:"
    echo "  claude-lane [message]               - Use last profile (or official) and run claude"
    echo "  claude-lane <profile> [message]     - Switch to profile and run claude"
    echo "  claude-lane set-key <ref> <key>     - Store an API key securely"
    echo "  claude-lane list                    - List available profiles and stored keys"
    echo "  claude-lane status                  - Show current configuration status"
    echo "  claude-lane --reset                 - Reset to official profile"
    echo "  claude-lane --env-only [profile]    - Only set environment variables"
    echo "  claude-lane help                    - Show this help message"
    echo ""
    echo "Examples:"
    echo "  claude-lane \"Hello, how are you?\"    - Quick chat with last/default profile"
    echo "  claude-lane official \"Write a poem\"  - Use official API to write a poem"
    echo "  claude-lane set-key official sk-ant-api03-..."
    echo "  claude-lane proxy                   - Switch to proxy and run claude interactively"
    echo "  claude-lane --env-only official     - Only set environment, don't run claude"
    echo ""
    echo "Configuration:"
    echo "  Config file: $CONFIG_FILE"
    echo "  Last profile: $LAST_PROFILE_FILE"
    echo "  Keys stored using OS-native secure storage"
}

detect_platform() {
    case "$(uname -s)" in
        Darwin*)
            echo "macos"
            ;;
        Linux*)
            echo "linux"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            echo "windows"
            ;;
        *)
            echo "unsupported"
            ;;
    esac
}

get_keystore_script() {
    local platform="$1"
    
    # Try installed location first, then project location
    case "$platform" in
        windows)
            if [[ -f "$HOME/.claude/scripts/windows/keystore.ps1" ]]; then
                echo "$HOME/.claude/scripts/windows/keystore.ps1"
            else
                echo "$PROJECT_ROOT/scripts/windows/keystore.ps1"
            fi
            ;;
        macos)
            if [[ -f "$HOME/.claude/scripts/macos/keystore.sh" ]]; then
                echo "$HOME/.claude/scripts/macos/keystore.sh"
            else
                echo "$PROJECT_ROOT/scripts/macos/keystore.sh"
            fi
            ;;
        linux)
            if [[ -f "$HOME/.claude/scripts/linux/keystore.sh" ]]; then
                echo "$HOME/.claude/scripts/linux/keystore.sh"
            else
                echo "$PROJECT_ROOT/scripts/linux/keystore.sh"
            fi
            ;;
        *)
            echo "Error: Unsupported platform: $platform" >&2
            exit 1
            ;;
    esac
}

call_keystore() {
    local platform="$(detect_platform)"
    local script="$(get_keystore_script "$platform")"
    
    if [[ ! -f "$script" ]]; then
        echo "Error: Keystore script not found: $script" >&2
        exit 1
    fi
    
    case "$platform" in
        windows)
            powershell.exe -ExecutionPolicy Bypass -File "$script" "$@"
            ;;
        *)
            chmod +x "$script" 2>/dev/null || true
            "$script" "$@"
            ;;
    esac
}

ensure_config_dir() {
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
    fi
}

save_last_profile() {
    local profile="$1"
    echo "$profile" > "$LAST_PROFILE_FILE"
}

get_last_profile() {
    if [[ -f "$LAST_PROFILE_FILE" ]]; then
        cat "$LAST_PROFILE_FILE"
    else
        echo "$DEFAULT_PROFILE"
    fi
}

# ============================================================================
# ProfileManager - Core abstraction layer for profile management
# ============================================================================

# Profile data structure (represented as pipe-separated string):
# format: "name|base_url|key_ref|has_key"
# example: "proxy|https://api.proxy.com|proxy|true"

# Create a profile object from configuration
create_profile() {
    local profile_name="$1"
    
    if [[ -z "$profile_name" ]]; then
        echo "Error: Profile name required" >&2
        return 1
    fi
    
    # Check if config file exists
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "Error: Configuration file not found: $CONFIG_FILE" >&2
        return 1
    fi
    
    # Parse configuration using existing parse_yaml function
    local config_data base_url key_ref
    if ! config_data="$(parse_yaml "$CONFIG_FILE" "$profile_name")"; then
        echo "Error: Profile '$profile_name' not found in configuration" >&2
        return 1
    fi
    
    base_url="$(echo "$config_data" | cut -d'|' -f1)"
    key_ref="$(echo "$config_data" | cut -d'|' -f2)"
    
    # Validate configuration
    if [[ -z "$base_url" ]]; then
        echo "Error: Profile '$profile_name' missing base_url in configuration" >&2
        return 1
    fi
    
    # Use profile name as key_ref if not specified
    if [[ -z "$key_ref" ]]; then
        key_ref="$profile_name"
    fi
    
    # Check if API key exists
    local has_key="false"
    if call_keystore get "$key_ref" >/dev/null 2>&1; then
        has_key="true"
    fi
    
    # Return profile object
    echo "$profile_name|$base_url|$key_ref|$has_key"
}

# Get profile by name
get_profile() {
    local profile_name="$1"
    create_profile "$profile_name"
}

# Get all available profiles from configuration
list_all_profiles() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        return 0
    fi
    
    local in_endpoints=false
    local profile_names=()
    
    while IFS= read -r line; do
        local trimmed="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
        if [[ "$trimmed" == "endpoints:" ]]; then
            in_endpoints=true
            continue
        fi
        
        if [[ "$in_endpoints" == true && "$line" =~ ^[[:space:]]{2}([a-zA-Z0-9_-]+):$ ]]; then
            local profile_name="${BASH_REMATCH[1]}"
            profile_names+=("$profile_name")
        fi
    done < "$CONFIG_FILE"
    
    # Create profile objects for each found profile
    for profile_name in "${profile_names[@]}"; do
        if create_profile "$profile_name" 2>/dev/null; then
            # Profile creation successful, already printed
            :
        else
            # Profile creation failed, create minimal profile for display
            echo "$profile_name|||false"
        fi
    done
}

# Get profiles that have API keys
list_profiles_with_keys() {
    list_all_profiles | while IFS='|' read -r name base_url key_ref has_key; do
        if [[ "$has_key" == "true" ]]; then
            echo "$name|$base_url|$key_ref|$has_key"
        fi
    done
}

# Check if profile has API key
profile_has_key() {
    local profile_name="$1"
    local profile_info
    
    if profile_info="$(get_profile "$profile_name")"; then
        local has_key="$(echo "$profile_info" | cut -d'|' -f4)"
        [[ "$has_key" == "true" ]]
    else
        return 1
    fi
}

# Get API key for profile
get_profile_api_key() {
    local profile_name="$1"
    local profile_info key_ref
    
    if ! profile_info="$(get_profile "$profile_name")"; then
        return 1
    fi
    
    key_ref="$(echo "$profile_info" | cut -d'|' -f3)"
    call_keystore get "$key_ref"
}

# Helper function to extract field from profile object
profile_get_field() {
    local profile_info="$1"
    local field="$2"
    
    case "$field" in
        "name") echo "$profile_info" | cut -d'|' -f1 ;;
        "base_url") echo "$profile_info" | cut -d'|' -f2 ;;
        "key_ref") echo "$profile_info" | cut -d'|' -f3 ;;
        "has_key") echo "$profile_info" | cut -d'|' -f4 ;;
        *) echo "Error: Unknown field '$field'" >&2; return 1 ;;
    esac
}

get_current_profile() {
    # Try to determine current profile from environment or last used
    if [[ -n "${CLAUDE_LANE_PROFILE:-}" ]]; then
        echo "$CLAUDE_LANE_PROFILE"
    else
        get_last_profile
    fi
}

show_status() {
    echo "=== claude-lane Status ==="
    echo "Config file: $CONFIG_FILE"
    echo "Last profile file: $LAST_PROFILE_FILE"
    echo ""
    
    local current_profile="$(get_current_profile)"
    echo "Current/Last profile: $current_profile"
    
    if [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
        echo "Environment: ANTHROPIC_API_KEY is set"
        echo "Environment: ANTHROPIC_BASE_URL=${ANTHROPIC_BASE_URL:-<not set>}"
    else
        echo "Environment: No ANTHROPIC_API_KEY set"
    fi
    
    echo ""
    if command -v claude >/dev/null 2>&1; then
        echo "Claude Code: Available ($(which claude))"
    else
        echo "Claude Code: Not found in PATH"
    fi
    
    echo ""
    list_profiles_and_keys
}

parse_yaml() {
    local file="$1"
    local profile="$2"
    
    if [[ ! -f "$file" ]]; then
        echo "Error: Config file not found: $file" >&2
        echo "Run 'claude-lane help' for setup instructions" >&2
        exit 1
    fi
    
    # YAML parser for endpoints section format
    local in_endpoints=false
    local in_profile=false
    local base_url=""
    local key_ref=""
    
    while IFS= read -r line; do
        # Remove leading/trailing whitespace
        line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
        
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^# ]] && continue
        
        # Look for endpoints: section
        if [[ "$line" == "endpoints:" ]]; then
            in_endpoints=true
            continue
        fi
        
        # If we're in endpoints section, look for our profile
        if [[ "$in_endpoints" == true ]]; then
            # Check if this line starts a new profile (accounting for indentation)
            if [[ "$line" =~ ^[[:alnum:]_-]+:$ ]]; then
                local profile_name="${line%:}"  # Remove the colon
                if [[ "$profile_name" == "$profile" ]]; then
                    in_profile=true
                else
                    in_profile=false
                fi
                continue
            fi
            
            # If we're in the target profile, parse the properties
            if [[ "$in_profile" == true ]]; then
                if [[ "$line" =~ ^base_url:[[:space:]]*\"?([^\"]+)\"? ]]; then
                    base_url="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ ^key_ref:[[:space:]]*\"?([^\"]+)\"? ]]; then
                    key_ref="${BASH_REMATCH[1]}"
                fi
            fi
        fi
    done < "$file"
    
    if [[ -z "$base_url" ]]; then
        echo "Error: Profile '$profile' not found or incomplete in config" >&2
        exit 1
    fi
    
    # If no key_ref specified, use profile name as key reference
    if [[ -z "$key_ref" ]]; then
        key_ref="$profile"
    fi
    
    echo "$base_url|$key_ref"
}

use_web_login() {
    echo "Using Claude Code's built-in web login..."
    echo ""
    
    # Auto-run claude if available
    if command -v claude >/dev/null 2>&1; then
        if [[ $# -gt 0 ]]; then
            echo "Running: claude $*"
            exec claude "$@"
        else
            echo "Running claude interactively..."
            exec claude
        fi
    else
        echo "Claude Code not found. Please install it first:"
        echo "Visit: https://github.com/anthropics/claude-code"
    fi
}

use_profile() {
    local profile_name="$1"
    shift # Remove profile from arguments, rest are claude arguments
    
    if [[ -z "$profile_name" ]]; then
        echo "Error: Profile name required" >&2
        show_usage
        exit 1
    fi
    
    # If no config file exists, use Claude Code's built-in web login
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "No configuration found. Using Claude Code's built-in web login."
        echo ""
        use_web_login "$@"
        return
    fi
    
    # Get profile using ProfileManager
    local profile_info
    if ! profile_info="$(get_profile "$profile_name")"; then
        echo "Error: Profile '$profile_name' not found or invalid" >&2
        exit 1
    fi
    
    # Extract profile fields
    local base_url="$(profile_get_field "$profile_info" "base_url")"
    local key_ref="$(profile_get_field "$profile_info" "key_ref")"
    local has_key="$(profile_get_field "$profile_info" "has_key")"
    
    # Handle missing API key
    if [[ "$has_key" != "true" ]]; then
        handle_missing_key "$profile_name" "$base_url" "$key_ref" "$@"
        return $?
    fi
    
    # Get API key
    local api_key
    if ! api_key="$(get_profile_api_key "$profile_name")"; then
        echo "Error: Failed to retrieve API key for '$profile_name'" >&2
        exit 1
    fi
    
    # Set environment variables for Claude Code
    export ANTHROPIC_API_KEY="$api_key"
    export ANTHROPIC_BASE_URL="$base_url"
    export CLAUDE_LANE_PROFILE="$profile"
    
    # Save as last used profile
    ensure_config_dir
    save_last_profile "$profile"
    
    echo "Switched to profile '$profile'"
    echo "Base URL: $base_url"
    echo "Using key: $key_ref"
    
    # If ENV_ONLY flag is set, just set environment and exit
    if [[ "$ENV_ONLY" == true ]]; then
        echo ""
        echo "Environment variables set:"
        echo "  ANTHROPIC_API_KEY=***"
        echo "  ANTHROPIC_BASE_URL=$base_url"
        echo "  CLAUDE_LANE_PROFILE=$profile"
        return 0
    fi
    
    # Auto-run claude if available
    if command -v claude >/dev/null 2>&1; then
        echo ""
        if [[ $# -gt 0 ]]; then
            # Run claude with provided arguments
            echo "Running: claude $*"
            exec claude "$@"
        else
            # Run claude interactively
            echo "Running claude interactively..."
            exec claude
        fi
    else
        echo ""
        echo "Claude Code not found. Environment variables set:"
        echo "  ANTHROPIC_API_KEY=***"
        echo "  ANTHROPIC_BASE_URL=$base_url"
        echo ""
        echo "To install Claude Code, visit: https://github.com/anthropics/claude-code"
        if [[ $# -gt 0 ]]; then
            echo ""
            echo "You wanted to run: claude $*"
        fi
    fi
}

# Check if running in interactive mode
is_interactive() {
    [[ -t 0 && -t 1 ]]
}

# Securely read password/API key from user
read_api_key() {
    local key=""
    echo -n "Enter API key (input hidden): " >&2
    read -s key
    echo >&2  # New line after hidden input
    echo "$key"
}

# Validate API key format (basic check)
validate_api_key() {
    local key="$1"
    if [[ -z "$key" ]]; then
        return 1
    fi
    # Basic format check - should start with sk- and be reasonably long
    if [[ "$key" =~ ^sk-[a-zA-Z0-9_-]{20,}$ ]]; then
        return 0
    fi
    return 1
}

# Get profiles that have stored API keys
get_profiles_with_keys() {
    # Use ProfileManager to get profiles with keys, return only profile names
    list_profiles_with_keys | cut -d'|' -f1
}

# Interactive menu when API key is missing
handle_missing_key() {
    local profile="$1"
    local base_url="$2" 
    local key_ref="$3"
    shift 3  # Remove first 3 args, rest are claude arguments
    
    # Check if running interactively
    if ! is_interactive; then
        echo "❌ Profile '$profile' found but API key is missing" >&2
        echo "   Key reference: $key_ref" >&2
        echo "   Base URL: $base_url" >&2
        echo "" >&2
        echo "To fix this issue:" >&2
        echo "   claude-lane set-key $key_ref <your-api-key>" >&2
        exit 1
    fi
    
    # Show error information
    echo "❌ Profile '$profile' found but API key is missing"
    echo "   Key reference: $key_ref"
    echo "   Base URL: $base_url"
    echo ""
    
    while true; do
        echo "What would you like to do?"
        echo "1. Add API key for '$profile' profile"
        echo "2. Continue with default Claude Code (web login)"
        echo "3. Choose a different profile"
        echo ""
        echo -n "Enter your choice (1-3): "
        read -r choice
        echo ""
        
        case "$choice" in
            "1")
                # Add API key
                local api_key
                api_key="$(read_api_key)"
                
                if [[ -z "$api_key" ]]; then
                    echo "❌ No key entered. Returning to menu..."
                    echo ""
                    continue
                fi
                
                if ! validate_api_key "$api_key"; then
                    echo "❌ Invalid API key format. Expected format: sk-..."
                    echo "   Please check your API key and try again."
                    echo ""
                    continue
                fi
                
                # Store the key
                if call_keystore set "$key_ref" "$api_key" >/dev/null 2>&1; then
                    echo "✅ API key stored successfully!"
                    echo ""
                    # Continue with original command using the newly stored key
                    use_profile "$profile" "$@"
                    return $?
                else
                    echo "❌ Failed to store API key. Please try again."
                    echo ""
                    continue
                fi
                ;;
            "2")
                # Use default Claude Code
                echo "Using Claude Code web login..."
                echo ""
                use_web_login "$@"
                return $?
                ;;
            "3")
                # Choose different profile
                local profiles_with_keys
                readarray -t profiles_with_keys < <(get_profiles_with_keys)
                
                if [[ ${#profiles_with_keys[@]} -eq 0 ]]; then
                    echo "❌ No profiles with API keys found."
                    echo "   Choose option 1 to add a key, or option 2 for web login."
                    echo ""
                    continue
                fi
                
                echo "Available profiles with API keys:"
                local i=1
                for prof in "${profiles_with_keys[@]}"; do
                    echo "$i. $prof"
                    ((i++))
                done
                echo ""
                echo -n "Enter your choice (1-${#profiles_with_keys[@]}): "
                read -r prof_choice
                echo ""
                
                if [[ "$prof_choice" =~ ^[0-9]+$ ]] && \
                   [[ "$prof_choice" -ge 1 ]] && \
                   [[ "$prof_choice" -le ${#profiles_with_keys[@]} ]]; then
                    local selected_profile="${profiles_with_keys[$((prof_choice-1))]}"
                    echo "Using profile '$selected_profile'..."
                    echo ""
                    use_profile "$selected_profile" "$@"
                    return $?
                else
                    echo "❌ Invalid choice. Please try again."
                    echo ""
                    continue
                fi
                ;;
            *)
                echo "❌ Invalid choice. Please enter 1, 2, or 3."
                echo ""
                ;;
        esac
    done
}

list_profiles_and_keys() {
    echo "=== Available Profiles ==="
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "No configuration file found."
        echo ""
        echo "Available options:"
        echo "  • Run without config (web login): claude-lane"
        echo "    (just type 'claude-lane' without parameters to start chatting)"
        echo ""
        echo "  • Set up API keys for advanced usage:"
        echo "    1. Copy template: cp ~/.claude/scripts/*/templates/config.yaml ~/.claude/config.yaml"
        echo "    2. Store API key: claude-lane set-key official-api sk-ant-api03-your-key"
        echo "    3. Use API mode: claude-lane official-api \"Hello\""
        return
    fi
    
    # Use ProfileManager to get all profiles
    while IFS='|' read -r profile_name base_url key_ref has_key; do
        # Skip empty lines
        [[ -z "$profile_name" ]] && continue
        
        local status_icon status_text
        if [[ "$has_key" == "true" ]]; then
            status_icon="[OK]"
            status_text="has key"
        else
            status_icon="[--]"
            status_text="no key"
        fi
        
        echo "  $status_icon $profile_name ($status_text)"
        
        if [[ "$has_key" != "true" && -n "$key_ref" ]]; then
            echo "      To add key: claude-lane set-key $key_ref sk-your-api-key"
        fi
    done < <(list_all_profiles)
    
    echo ""
    echo "=== Usage ==="
    echo "Without config (web login): claude-lane \"Hello\""
    echo "With API profile: claude-lane profile-name \"Hello\""
}

is_valid_profile() {
    local profile="$1"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        return 1
    fi
    grep -q "^[[:space:]]*$profile[[:space:]]*:" "$CONFIG_FILE"
}

# Parse command line arguments
parse_args() {
    local profile=""
    local claude_args=()
    local i=1
    
    while [[ $i -le $# ]]; do
        local arg="${!i}"
        case "$arg" in
            "--env-only")
                ENV_ONLY=true
                ((i++))
                ;;
            "--reset")
                profile="$DEFAULT_PROFILE"
                ((i++))
                ;;
            "--help"|"-h"|"help")
                show_usage
                exit 0
                ;;
            "--version")
                echo "claude-lane v1.2.0"
                exit 0
                ;;
            "set-key")
                if [[ $# -ne 3 ]]; then
                    echo "Error: 'set-key' requires key_ref and api_key arguments" >&2
                    show_usage
                    exit 1
                fi
                ensure_config_dir
                call_keystore set "${@:2:2}"
                exit 0
                ;;
            "list")
                list_profiles_and_keys
                exit 0
                ;;
            "status")
                show_status
                exit 0
                ;;
            -*)
                echo "Error: Unknown option '$arg'" >&2
                show_usage
                exit 1
                ;;
            *)
                # Check if this is a known profile
                if [[ -z "$profile" ]] && is_valid_profile "$arg"; then
                    profile="$arg"
                    ((i++))
                else
                    # This and all remaining args are for claude
                    claude_args=("${@:$i}")
                    break
                fi
                ;;
        esac
    done
    
    # If no profile specified, use last/default
    if [[ -z "$profile" ]]; then
        profile="$(get_current_profile)"
    fi
    
    # Use the profile and pass remaining args to claude
    use_profile "$profile" "${claude_args[@]}"
}

# Main entry point
main() {
    # Handle special case of no arguments
    if [[ $# -eq 0 ]]; then
        # If no config file, use web login directly
        if [[ ! -f "$CONFIG_FILE" ]]; then
            use_web_login
        else
            local last_profile="$(get_current_profile)"
            # Check if the profile exists and has a key before using it
            if is_valid_profile "$last_profile"; then
                local config_data="$(parse_yaml "$CONFIG_FILE" "$last_profile" 2>/dev/null)"
                if [[ $? -eq 0 ]]; then
                    local key_ref="$(echo "$config_data" | cut -d'|' -f2)"
                    if call_keystore get "$key_ref" >/dev/null 2>&1; then
                        # Profile has a valid key, use it
                        use_profile "$last_profile"
                    else
                        # Profile exists but no key, show helpful message
                        echo "Profile '$last_profile' is configured but missing API key."
                        echo "To set up the key: claude-lane set-key $key_ref sk-your-api-key"
                        echo "Or use web login: claude-lane (without profile name)"
                        echo ""
                        use_web_login
                    fi
                else
                    # Invalid profile, fall back to web login
                    echo "Last used profile '$last_profile' not found in config."
                    use_web_login
                fi
            else
                # Invalid profile, fall back to web login
                echo "Last used profile '$last_profile' not found in config."
                use_web_login
            fi
        fi
        exit 0
    fi
    
    # Parse and execute
    parse_args "$@"
}

# Run main function
main "$@"